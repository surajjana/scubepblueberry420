{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"liststy",
				"list-style-type"
			],
			[
				"mar",
				"margin-top"
			],
			[
				"js",
				"js_name"
			],
			[
				"def",
				"default"
			],
			[
				"them",
				"theme_path"
			],
			[
				"the",
				"theme_name"
			],
			[
				"fte",
				"fetchrowset  (function)"
			],
			[
				"in",
				"input	Tag"
			],
			[
				"sessiond",
				"session_destroy"
			],
			[
				"mysqlerr",
				"mysql_error"
			],
			[
				"req",
				"req1	require_once â€¦"
			],
			[
				"SITE",
				"SITE_ROOT  (constant)"
			],
			[
				"_ap",
				"_api_call"
			],
			[
				"_",
				"_api_decrypt"
			],
			[
				"api",
				"api_callback_name"
			],
			[
				"_api",
				"_api_encrypt"
			],
			[
				"ret",
				"ret_val"
			],
			[
				"ap",
				"api_callback_name"
			],
			[
				"json",
				"json_decode"
			],
			[
				"pu",
				"public_key  (variable)"
			],
			[
				"array",
				"array"
			],
			[
				"isn",
				"is_null"
			],
			[
				"define",
				"defined"
			],
			[
				"ass",
				"assigns"
			],
			[
				"yacc",
				"yaccdevel  (variable)"
			],
			[
				"deb",
				"yaccdebug  (variable)"
			],
			[
				"fun",
				"function_body"
			],
			[
				"modu",
				"module_body"
			],
			[
				"mo",
				"module_body"
			],
			[
				"tar",
				"targs"
			],
			[
				"Ass",
				"Assign  (class)"
			],
			[
				"get",
				"get_tokens"
			],
			[
				"le",
				"lex"
			],
			[
				"try",
				"try	Try/Except"
			],
			[
				"lex",
				"lexer"
			],
			[
				"Key",
				"KeyboardInterrupt  (class)"
			],
			[
				"pr",
				"print	Python-Print"
			],
			[
				"el",
				"elif"
			],
			[
				"pro",
				"prompt"
			],
			[
				"tr",
				"transpose  (function)"
			],
			[
				"plot",
				"plotter"
			],
			[
				"l",
				"line_tokens"
			],
			[
				"li",
				"lines"
			],
			[
				"sy",
				"Symbols"
			],
			[
				"toke",
				"tokens"
			],
			[
				"c",
				"ctoken"
			],
			[
				"token",
				"token_type"
			],
			[
				"ini_",
				"ini_set  (function)"
			],
			[
				"url",
				"urlopen  (function)"
			],
			[
				"pri",
				"println"
			],
			[
				"ar",
				"arduino_obj"
			],
			[
				"do",
				"domain  (variable)"
			],
			[
				"get_c",
				"get_count"
			],
			[
				"Co",
				"CountInterfaceHandler"
			],
			[
				"ser",
				"SERVER_URL"
			],
			[
				"atte",
				"attempts"
			],
			[
				"upd",
				"update_server"
			],
			[
				"GET",
				"GET_vars"
			],
			[
				"defin",
				"define"
			],
			[
				"mysqfet",
				"mysql_fetch_row"
			],
			[
				"pl",
				"plot_date  (function)"
			],
			[
				"pu_",
				"pub_a"
			],
			[
				"lo",
				"hLocals  (variable)"
			],
			[
				"typ",
				"type_name"
			],
			[
				"str",
				"str"
			],
			[
				"targ",
				"targets"
			],
			[
				"__pro",
				"__proc_body  (function)"
			],
			[
				"__get",
				"__get_entity_name  (function)"
			],
			[
				"v",
				"bases  (variable)"
			],
			[
				"st",
				"stmt"
			],
			[
				"is",
				"is_private"
			],
			[
				"bas",
				"bases"
			],
			[
				"__se",
				"__set_options  (function)"
			],
			[
				"op",
				"opt"
			],
			[
				"i",
				"ignore_errors  (variable)"
			],
			[
				"gro",
				"groups  (function)"
			],
			[
				"gr",
				"groups  (function)"
			],
			[
				"__cur",
				"__current_line"
			],
			[
				"va",
				"value"
			],
			[
				"ty",
				"type"
			],
			[
				"var",
				"var_tuple"
			],
			[
				"cl",
				"class	New Class"
			],
			[
				"m",
				"min_log_level"
			],
			[
				"me",
				"message"
			],
			[
				"f",
				"fatal"
			],
			[
				"wri",
				"write_scr"
			],
			[
				"it",
				"iterable_object"
			],
			[
				"cpp",
				"cpp_ast"
			],
			[
				"retur",
				"returns"
			],
			[
				"h",
				"hFuncDef  (variable)"
			],
			[
				"arg",
				"args"
			],
			[
				"start",
				"start_at"
			],
			[
				"return",
				"return_type"
			],
			[
				"clas",
				"class	New Class"
			],
			[
				"type",
				"typex"
			],
			[
				"tran",
				"Translation"
			],
			[
				"std",
				"stdout  (variable)"
			],
			[
				"nam",
				"names"
			],
			[
				"__na",
				"__namespaces"
			],
			[
				"__in",
				"__includes"
			],
			[
				"__",
				"__final  (variable)"
			],
			[
				"name",
				"namespace"
			],
			[
				"T",
				"True"
			],
			[
				"Tran",
				"TranslationUnit"
			],
			[
				"met",
				"methon"
			],
			[
				"r",
				"rt_node"
			],
			[
				"for",
				"for	For Loop"
			],
			[
				"ex",
				"ex_cmd"
			],
			[
				"re",
				"replacements"
			],
			[
				"chi",
				"child"
			],
			[
				"chil",
				"childs"
			],
			[
				"p",
				"py_ast"
			],
			[
				"tp",
				"to_cpp"
			],
			[
				"id",
				"is_defined"
			],
			[
				"vars",
				"vars_new"
			],
			[
				"de",
				"decl"
			],
			[
				"meth",
				"methon"
			],
			[
				"file",
				"file_name"
			],
			[
				"al",
				"vertical-align"
			],
			[
				"pos",
				"post  (variable)"
			],
			[
				"myserr",
				"mysql_error"
			],
			[
				"is_n",
				"is_null"
			],
			[
				"print",
				"print_r"
			],
			[
				"arra",
				"array"
			],
			[
				"sm",
				"smaller  (value)"
			],
			[
				"fon",
				"font-size"
			],
			[
				"getthe",
				"get_theme_name"
			],
			[
				"t",
				"t_dir"
			]
		]
	},
	"buffers":
	[
		{
			"file": "git-repo-details",
			"settings":
			{
				"buffer_size": 29,
				"line_ending": "Unix",
				"name": "scubepblueberry420"
			}
		},
		{
			"file": "/home/sprasad/Desktop/test.py",
			"settings":
			{
				"buffer_size": 1254,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 602.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/var/www/OpenCube/blueberry/index.php",
		"/var/www/OpenCube/blueberry/privacy-policy.php",
		"/var/www/OpenCube/blueberry/contents/privacy_policy.php",
		"/var/www/OpenCube/blueberry/includes/bootstrap.php",
		"/var/www/OpenCube/blueberry/includes/functions.php",
		"/var/www/OpenCube/blueberry/style.css",
		"/var/www/OpenCube/blueberry/contact.php",
		"/var/www/OpenCube/blueberry/details.php",
		"/var/www/OpenCube/blueberry/login.php",
		"/home/sprasad/Desktop/cpu_gpu_temp.py",
		"/home/sprasad/Documents/C++/macros.cpp",
		"/home/sprasad/Desktop/samp.py",
		"/var/www/OpenCube/inspire/index.php",
		"/var/www/OpenCube/inspire/includes/functions.php",
		"/var/www/OpenCube/inspire/includes/theming.php",
		"/var/www/OpenCube/inspire/includes/bootstrap.php",
		"/var/www/OpenCube/inspire/contents/themes/default/style.css",
		"/var/www/OpenCube/inspire/includes/config.php",
		"/var/www/OpenCube/inspire/contents/themes/default/index.php",
		"/var/www/OpenCube/inspire/contents/themes/simplest/index.php",
		"/var/www/OpenCube/inspire/contents/themes/bluebone/index.php",
		"/var/www/OpenCube/hope/contact.html",
		"/var/www/OpenCube/hope/about.php",
		"/var/www/OpenCube/hope/_parts/header.php",
		"/var/www/OpenCube/hope/index.php",
		"/var/www/OpenCube/hope/_parts/footer.php",
		"/var/www/OpenCube/hope/styles/style.css",
		"/var/www/OpenCube/hope/includes/functions.php",
		"/home/sprasad/Desktop/camT.py",
		"/var/www/OpenCube/js/jquery-1.7.1.min.js",
		"/var/www/OpenCube/index.php",
		"/var/www/OpenCube/includes/config.php",
		"/var/www/OpenCube/api.php",
		"/var/www/OpenCube/admin/videos.php",
		"/var/www/OpenCube/admin/index.php",
		"/var/www/OpenCube/admin/photos.php",
		"/var/www/OpenCube/admin/stats.php",
		"/var/www/OpenCube/admin/settings.php",
		"/var/www/OpenCube/contents/plugins/plugin_registry.php",
		"/var/www/OpenCube/includes/bootstrap.php",
		"/var/www/OpenCube/admin/events.php",
		"/var/www/OpenCube/admin/users.php",
		"/var/www/OpenCube/admin/adminfunctions.php",
		"/var/www/OpenCube/includes/functions.php",
		"/var/www/bms_mech/admin/index.php",
		"/var/www/OpenCube/admin/login.php",
		"/var/www/OpenCube/admin/logout.php",
		"/var/www/OpenCube/admin/style.css",
		"/var/www/OpenCube/includes/pluginh.php",
		"/var/www/OpenCube/other/AES256Cipher.java",
		"/var/www/OpenCube/includes/api_functions.php",
		"/var/www/OpenCube/includes/api_controller.php",
		"/var/www/tp/demo/sapi/index.php",
		"/var/www/OpenCube/includes/mysqllib.php",
		"/home/sprasad/Desktop/AES256Cipher.java",
		"/var/www/tp/demo/sapi/models/TodoItem.php",
		"/var/www/tp/demo/sapi/models/core.php",
		"/var/www/tp/demo/sapi/controllers/Todo.php",
		"/var/www/OpenCube/includes/pluginh.inc.php",
		"/var/www/OpenCube/dummy.php",
		"/var/www/muPress/includes/functions.php",
		"/var/www/codeoverflow/build2/_includes/functions.inc.php",
		"/home/sprasad/Desktop/gitclones/asp/tests/cpuinfo",
		"/home/sprasad/Desktop/gitclones/asp/README",
		"/home/sprasad/Documents/Sublime/PlyToy/src/Py2CPPLib/__init__.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/core/ipym/samples/gardensnake.py",
		"/home/sprasad/Documents/Sublime/PlyToy/src/ply/yacc.py",
		"/home/sprasad/Documents/Sublime/PlyToy/src/Py2CPPLib/ast_transformer.py",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/py2cpp.py",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/Py2CPPLib/__init__.py",
		"/home/sprasad/Documents/Sublime/py2cpp/distrib/py2cpp_launch.py",
		"/home/sprasad/Documents/Sublime/PlyToy/src/Py2CPPLib/astdriver.py",
		"/home/sprasad/Documents/Sublime/PlyToy/src/parser.out",
		"/home/sprasad/Documents/Sublime/PlyToy/src/lexer.py",
		"/home/sprasad/Documents/Sublime/PlyToy/src/parser.py",
		"/home/sprasad/Documents/Sublime/PlyToy/src/plytoy.py",
		"/usr/lib/python2.7/ast.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/core/ipym/__init__.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/lexer.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/start.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/__init__.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/core/__init__.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/parser.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/gardensnake.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/scalc/scalc_lexer.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/scalc/scalc.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/pymtokens.py",
		"/home/sprasad/Documents/Sublime/PyMat/src/ipym/ply/lex.py",
		"/home/sprasad/Desktop/my_toy_compiler/example.txt",
		"/etc/php5/apache2/php.ini",
		"/home/sprasad/Desktop/rakesh/updatehandler.py",
		"/home/sprasad/Desktop/matplotlib_expts/src/expts/test.py",
		"/home/sprasad/Desktop/rakesh/ardu_counter.pde",
		"/var/www/counter/index.php",
		"/media/sprasad/SPRASAD/RAKESH/index.php",
		"/home/sprasad/Desktop/rakesh/arduinox.py",
		"/home/sprasad/Desktop/rakesh/arduino/__init__.py",
		"/home/sprasad/Desktop/rakesh/arduino/arduino.py",
		"/var/www/muPress/includes/bootstrap.php",
		"/home/sprasad/Desktop/rakesh/Python-Arduino-Proto-API-v2/sample_blink.py",
		"/home/sprasad/Desktop/rakesh/interface.py",
		"/home/sprasad/Desktop/rakesh/index.php",
		"/var/www/birdy/index.php",
		"/home/sprasad/Desktop/matplotlib_expts/src/IMP/hello.imp",
		"/home/sprasad/Desktop/matplotlib_expts/index_expt.py",
		"/home/sprasad/Desktop/hell",
		"/home/sprasad/Desktop/test_mplotlib",
		"/media/sprasad/Sprasad/ToDVD/MyStuff/Developer/Windows/MyCreations/Autopad/custom.udb",
		"/home/sprasad/Documents/cyt.cpp",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/Py2CPPLib/holders.py",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/Py2CPPLib/astmodifier.py",
		"/usr/lib/python3.2/ast.py",
		"/home/sprasad/Documents/Sublime/py2cpp/distrib/samples/simple2.py",
		"/home/sprasad/Documents/Sublime/py2cpp/distrib/samples/simple.py",
		"/home/sprasad/Documents/Sublime/py2cpp/distrib/samples/factorial.py",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/Py2CPPLib/clogger.py",
		"/home/sprasad/Documents/Sublime/py2cpp/distrib/samples/oopy.py",
		"/home/sprasad/Documents/Sublime/py2cpp/distrib/samples/loops.py",
		"/home/sprasad/Documents/Sublime/shedskin-0.9.4/shedskin/lib/socket.hpp",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/expt.cpp",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/samples/simple.py",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/t.py",
		"/home/sprasad/Documents/Sublime/shedskin-0.9.4/shedskin/lib/re.cpp",
		"/usr/lib/python2.7/re.py",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/t.cpp",
		"/home/sprasad/Documents/Sublime/Py2CPP/src/t.hpp",
		"/home/sprasad/Documents/Sublime/shedskin-0.9.4/shedskin/lib/re.py",
		"/usr/lib/python2.7/sre_compile.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"http://all-free-download.com/free-website-templates/",
			"http://",
			"dbx",
			"assign",
			"comparison",
			"test",
			"syntax error",
			"literals",
			"WS",
			"t_ignore",
			"sys",
			"re.",
			"re",
			"from ipym import *\nfrom ply import lex\n\n",
			"INPUT",
			"\nclass BaseNode(object):\n\n	_fields = ()\n\n	def get_repr(self,node):\n		if hasattr(node,\"to_cpp\"):\n			return str(node.to_cpp())\n		else:\n			return str(node)\n\n\nclass Include(BaseNode):\n\n	_fields = (\"name\",\"type\")\n\n	def __init__(self, name, namespace = False):\n		super(Include, self).__init__()\n		self.name = str(name)\n		if namespace: self.type = 0\n		else: self.type = 1\n		\n\n\nclass TranslationUnit(BaseNode):\n\n	_fields = (\"body\")\n\n	def __init__(self, body):\n		super(TranslationUnit, self).__init__()\n		self.body = body		\n\n\nclass ClassDef(BaseNode):\n\n	def __init__(self, name,bases = [],private = [],public = []):\n		super(ClassDef, self).__init__()\n		self.name = str(name)\n		self.bases = bases\n		self.private = private\n		self.public = public\n\n	def __get_entity_name(self,node):\n		if type(node) is FunctionDef:\n			return [node.name]\n\n	def __proc_mem_function(self,node):\n		if node.name == \"__init__\":\n			node.name = self.name\n			node.returns = \"\"\n		elif node.name == \"__del__\":\n			node.name = \"~%s\" % self.name\n			node.returns = \"\"\n		return node\n	def __filter_public(self):\n		for i in range(len(self.public)):\n			line = self.public[i]\n			if type(line) is FunctionDef:\n				line = self.__proc_mem_function(line)\n				if str(self.__get_entity_name(line)).startswith(\"__\"):\n					if not str(self.__get_entity_name(line)).endswith(\"__\"):\n						self.private.append(self.public.pop(i))	\n			elif type(line) is Assignment:\n				pr_tars = []\n				pu_tars = []\n				for target in line.targets:	\n					print(target)				\n					if str(target[0]).startswith(\"__\") and not \\\n					str(target[0]).endswith(\"__\"):\n						pr_tars.append(target)\n					else:\n						pu_tars.append(target)\n				self.public.pop(i)\n				if len(pr_tars) > 0:\n					pri_a = Assignment(line.value,line.type_name,pr_tars)\n					self.private.append(pri_a)\n				if len(pu_tars) > 0:\n					pub_a = Assignment(line.value,line.type_name,pu_tars)\n					self.public.append(pub_a)\n\n\n\n\n	def __proc_body(self,body):\n		self.__filter_public()\n		decls = []\n		tmp = []\n		for line in body:\n			if type(line) is Assignment:\n				decls.append(self.get_repr(line))\n			else:\n				tmp.append(self.get_repr(line))\n		return \"\\n\".join(decls+tmp) \n\n	def to_cpp(self):\n		stmt  = \"class %s\" % self.name\n		if len(self.bases): stmt += \" : %s\" % \",\".join([\"public %s\" % base for base in self.bases])\n		stmt += \"{\\n\"\n		stmt += \"private:\\n%s\" % self.__proc_body(self.private)\n		stmt += \"public: \\n%s\" % self.__proc_body(self.public)\n		stmt += \"}\\n\"\n		return stmt\n\n		\n\n\nclass Assignment(BaseNode):\n\n	_fields = (\"value\",\"type_name\",\"targets\")\n\n	def __init__(self,value,type_,targets):\n		super(Assignment, self).__init__()\n		self.value = value\n		self.type_name = type_\n		self.targets = targets\n\n	def __grp_vars(self):\n		vars_new = []\n		vars_old = []\n		for var,decl in self.targets:\n			if decl:\n				vars_old.append(var)\n			else:\n				vars_new.append(var)\n		return vars_new,vars_old\n\n\n	def to_cpp(self):\n		stmt  = \"\"\n		v_new,v_old = self.__grp_vars()\n		if len(v_new) > 0:\n			stmt += \"%s %s = %s;\" % (self.type_name,\",\".join(v_new),self.value)\n		if len(v_old) > 0:\n			stmt += \"%s = %s;\" % (\",\".join(v_old),self.value)\n		return stmt\n\n\nclass FunctionDef(BaseNode):\n\n	_fields = (\"name\",\"args\",\"returns\",\"body\")\n\n	def __init__(self,name,args,returns,body):\n		super(FunctionDef, self).__init__()\n		self.name = name\n		self.args = args\n		self.returns = returns\n		self.body = body	\n\n	def __proc_body(self):\n		bo = []\n		for line in self.body:\n			bo.append(self.get_repr(line))\n		return bo\n\n	def __proc_args(self):\n		_args = []\n		for arg in self.args:\n			arg = list(arg)\n			if arg[0] == None: arg[0] = \"/* type */\"\n			st = \"%s %s\" % (arg[0],arg[1])\n			if arg[2] is not None: st += \" = %s\" % arg[2]\n			_args.append(st)\n		return _args\n\n	def to_cpp(self):\n		name = str(self.name)\n		body = \"\\n\".join(self.__proc_body()).strip()\n		args = \",\".join(self.__proc_args())\n		rett = self.get_repr(self.returns)\n		stmt  = \"%s %s(%s){\\n%s\\n}\\n\" % (rett,name,args,body)\n		return stmt\n\n				\n\n\n",
			"min_log_level",
			"unkn",
			"entitites",
			"clogger.info",
			"warn",
			"clogger.critical",
			"iterator",
			"JAD",
			"class Function",
			"scope",
			"\"\"\"",
			"main",
			"init",
			"category-archive-meta",
			"();"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"<?php echo get_domain(); ?>",
			".",
			"db_obj",
			"log_level",
			"self.critical"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "git-repo-details",
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								11,
								11
							]
						],
						"settings":
						{
							"auto_name": "scubepblueberry420",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/sprasad/Desktop/test.py",
					"settings":
					{
						"buffer_size": 1254,
						"regions":
						{
						},
						"selection":
						[
							[
								189,
								189
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 316.0
	},
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 257.0,
	"status_bar_visible": true
}
